name: Deploy Test App

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'assure360/test-app/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'assure360/test-app/**'
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: assure360-app
  APP_NAME: assure360-app

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd assure360/test-app/app
        pip install -r requirements.txt

    - name: Run tests
      run: |
        cd assure360/test-app/app
        python -c "import app; print('App imports successfully')"
        python -c "import lambda_handler; print('Lambda handler imports successfully')"

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install AWS CLI (if missing)
      run: |
        if ! command -v aws >/dev/null 2>&1; then
          if command -v apt-get >/dev/null 2>&1; then
            (sudo apt-get update || apt-get update)
            (sudo apt-get install -y awscli || apt-get install -y awscli)
          fi
        fi
        aws --version || true

    - name: Load local AWS creds from secrets (act only)
      if: ${{ env.ACT }}
      run: |
        if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV; fi
        if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV; fi
        if [ -n "${{ secrets.AWS_SESSION_TOKEN }}" ]; then echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV; fi
        echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      if: ${{ !env.ACT }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ROLE_ARN_PROD || secrets.AWS_ROLE_ARN_DEV }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd assure360/test-app/app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        IMAGE_DIGEST=$(aws ecr describe-images \
          --repository-name $ECR_REPOSITORY \
          --image-ids imageTag=$IMAGE_TAG \
          --region $AWS_REGION \
          --query 'imageDetails[0].imageDigest' --output text)
        echo "digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Update ECS service to new image digest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        IMAGE_DIGEST: ${{ steps.build-image.outputs.digest }}
      run: |
        CLUSTER_NAME="$APP_NAME-cluster"
        SERVICE_NAME="$APP_NAME-svc"

        # Get current task definition ARN
        TD_ARN=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" \
          --region $AWS_REGION \
          --query 'services[0].taskDefinition' --output text)

        # Get current task definition JSON
        aws ecs describe-task-definition --task-definition "$TD_ARN" \
          --region $AWS_REGION \
          --query 'taskDefinition' > td.json

        # Strip fields not allowed on register
        cat td.json | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' > td-stripped.json

        # Update image to digest for first container
        NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY@$IMAGE_DIGEST"
        cat td-stripped.json | jq '.containerDefinitions[0].image = env.NEW_IMAGE' > td-updated.json

        # Register new task definition
        NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td-updated.json \
          --region $AWS_REGION \
          --query 'taskDefinition.taskDefinitionArn' --output text)

        # Update service to use new task definition and force new deployment
        aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" \
          --region $AWS_REGION \
          --task-definition "$NEW_TD_ARN" --force-new-deployment

        echo "new_task_definition=$NEW_TD_ARN" >> $GITHUB_OUTPUT

    - name: Test deployment (via ALB)
      run: |
        ALB_NAME="$APP_NAME-alb"
        ALB_DNS=$(aws elbv2 describe-load-balancers --names "$ALB_NAME" \
          --region $AWS_REGION \
          --query 'LoadBalancers[0].DNSName' --output text)
        echo "Testing API at: http://$ALB_DNS"

        # Retry loop until healthy
        for i in $(seq 1 20); do
          if curl -fsS "http://$ALB_DNS/health" >/dev/null; then
            echo "âœ… Health check passed"; break
          fi
          echo "Waiting for service to become healthy... ($i)"
          sleep 10
        done
        curl -f "http://$ALB_DNS/hello" || exit 1
        curl -f "http://$ALB_DNS/test" || exit 1
        echo "ðŸŽ‰ All tests passed!"

    - name: Output deployment info
      run: |
        ALB_NAME="$APP_NAME-alb"
        ALB_DNS=$(aws elbv2 describe-load-balancers --names "$ALB_NAME" \
          --region $AWS_REGION \
          --query 'LoadBalancers[0].DNSName' --output text)
        echo "ðŸš€ Deployment successful!"
        echo "ALB URL: http://$ALB_DNS"
        echo "Test endpoints:"
        echo "  Health: http://$ALB_DNS/health"
        echo "  Hello:  http://$ALB_DNS/hello"
        echo "  Test:   http://$ALB_DNS/test"

  destroy:
    name: Destroy Resources
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Destroy infrastructure
      run: |
        cd assure360/test-app/infrastructure
        terraform init
        terraform destroy -auto-approve

    - name: Clean up ECR images
      run: |
        aws ecr batch-delete-image \
          --repository-name $ECR_REPOSITORY \
          --image-ids imageTag=latest imageTag=${{ github.sha }} || true

    - name: Output cleanup info
      run: |
        echo "ðŸ§¹ Cleanup complete!"
        echo "All test app resources have been destroyed."
